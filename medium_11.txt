Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

It is a sweltering summer day, and a boy wants to buy some ice cream bars.


At the store, there are `n` ice cream bars. You are given an array `costs` of length `n`, where `costs[i]` is the price of the `ith` ice cream bar in coins. The boy initially has `coins` coins to spend, and he wants to buy as many ice cream bars as possible. 


**Note:** The boy can buy the ice cream bars in any order.


Return *the **maximum** number of ice cream bars the boy can buy with* `coins` *coins.*


You must solve the problem by counting sort.


 


**Example 1:**



```

**Input:** costs = [1,3,2,4,1], coins = 7
**Output:** 4
**Explanation:** The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.

```

**Example 2:**



```

**Input:** costs = [10,6,8,7,7,8], coins = 5
**Output:** 0
**Explanation:** The boy cannot afford any of the ice cream bars.

```

**Example 3:**



```

**Input:** costs = [1,6,3,1,2,5], coins = 20
**Output:** 6
**Explanation:** The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.

```

 


**Constraints:**


* `costs.length == n`
* `1 <= n <= 105`
* `1 <= costs[i] <= 105`
* `1 <= coins <= 108`



#Test case
solution = Solution()
assert solution.maxIceCream([10, 18, 37, 39, 45, 56, 61, 66, 93], 83) == 3
assert solution.maxIceCream([1, 23, 36, 46, 53, 56, 59, 76, 98], 53) == 2
assert solution.maxIceCream([55, 83], 53) == 0
assert solution.maxIceCream([9, 33, 54, 56, 88, 99], 150) == 3
assert solution.maxIceCream([10, 19, 28, 30, 41, 63, 92, 97, 99], 181) == 5
assert solution.maxIceCream([20, 37, 51, 54, 57, 68], 8) == 0
assert solution.maxIceCream([8, 22, 60, 69, 76], 85) == 2
assert solution.maxIceCream([13, 18, 21, 45, 77], 194) == 5
assert solution.maxIceCream([14, 27, 40, 52, 60, 86], 184) == 4
assert solution.maxIceCream([11, 21, 24, 34, 35, 42, 68, 71, 79, 85], 146) == 5
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def maxIceCream(self, costs: List[int], coins: int) -> int:
        costs.sort()
        for i, c in enumerate(costs):
            if coins < c:
                return i
            coins -= c
        return len(costs)

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

You are given an integer array `nums`. We consider an array **good** if it is a permutation of an array `base[n]`.


`base[n] = [1, 2, ..., n - 1, n, n]` (in other words, it is an array of length `n + 1` which contains `1` to `n - 1` exactly once, plus two occurrences of `n`). For example, `base[1] = [1, 1]` and `base[3] = [1, 2, 3, 3]`.


Return `true` *if the given array is good, otherwise return*`false`.


**Note:** A permutation of integers represents an arrangement of these numbers.


 


**Example 1:**



```

**Input:** nums = [2, 1, 3]
**Output:** false
**Explanation:** Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. However, base[3] has four elements but array nums has three. Therefore, it can not be a permutation of base[3] = [1, 2, 3, 3]. So the answer is false.

```

**Example 2:**



```

**Input:** nums = [1, 3, 3, 2]
**Output:** true
**Explanation:** Since the maximum element of the array is 3, the only candidate n for which this array could be a permutation of base[n], is n = 3. It can be seen that nums is a permutation of base[3] = [1, 2, 3, 3] (by swapping the second and fourth elements in nums, we reach base[3]). Therefore, the answer is true.
```

**Example 3:**



```

**Input:** nums = [1, 1]
**Output:** true
**Explanation:** Since the maximum element of the array is 1, the only candidate n for which this array could be a permutation of base[n], is n = 1. It can be seen that nums is a permutation of base[1] = [1, 1]. Therefore, the answer is true.
```

**Example 4:**



```

**Input:** nums = [3, 4, 4, 1, 2, 1]
**Output:** false
**Explanation:** Since the maximum element of the array is 4, the only candidate n for which this array could be a permutation of base[n], is n = 4. However, base[4] has five elements but array nums has six. Therefore, it can not be a permutation of base[4] = [1, 2, 3, 4, 4]. So the answer is false.

```

 


**Constraints:**


* `1 <= nums.length <= 100`
* `1 <= num[i] <= 200`



#Test case
solution = Solution()
assert solution.isGood([66, 11, 53, 112, 143, 57, 105, 6, 196, 189, 194, 95, 60, 184, 171, 37, 75, 84, 167, 122, 144, 121, 197, 26, 190, 161, 108, 109, 89, 154, 117, 35, 103, 200, 127, 15, 137, 115, 123, 79, 65, 118, 88, 160, 100, 1, 54, 94]) == False
assert solution.isGood([138, 20, 74, 174, 51]) == False
assert solution.isGood([154, 119, 37, 191, 40]) == False
assert solution.isGood([69, 109, 29, 144, 4, 148, 54, 171, 86, 162, 165, 151, 138, 99, 108, 147, 47, 84, 133, 34, 77, 180, 56, 196, 194, 83, 23, 8, 97, 189, 36, 38, 62, 146, 20, 72, 78, 25]) == False
assert solution.isGood([64, 159, 33, 96, 115, 59, 139, 49, 45, 195, 43, 146, 128, 152, 143, 97, 44, 190, 2, 191, 192, 94, 79, 140, 108, 130, 127, 61, 77, 154, 93, 174, 73, 196, 164, 34, 199, 175, 89, 28, 72, 155, 101, 74, 99, 68, 163, 100, 122, 125, 80, 50, 55, 169, 179, 47, 32, 109]) == False
assert solution.isGood([57, 145, 77, 27, 113, 30, 92, 19, 63, 163, 198, 185, 184, 154, 148, 44, 51, 150, 39, 153, 93, 52, 168, 66, 173, 37, 64, 118, 3, 122, 146, 172, 176, 141, 49, 83, 7, 73, 20, 95]) == False
assert solution.isGood([171, 151, 158, 27, 41, 134, 177, 115, 34, 112, 59, 122, 91, 140, 172, 160, 38, 111, 184, 123, 106, 133, 47, 52, 119, 31, 169, 45, 14, 188, 143, 101, 58, 189, 165, 198, 175, 107, 99, 53, 57, 130, 48, 136, 126, 88, 132, 128, 157, 127, 182]) == False
assert solution.isGood([158, 137, 197, 185, 130, 110, 135, 64, 124, 83, 150, 24, 173, 117, 87, 70, 140, 134, 115, 125, 90, 10, 175, 15, 122, 11, 170, 85]) == False
assert solution.isGood([71, 27, 79, 61, 158, 38, 52, 200, 196, 46, 170, 178, 123, 138, 181]) == False
assert solution.isGood([188, 185, 27, 194, 79, 148, 153, 62, 124, 47, 143, 154, 28, 108, 186, 29, 159, 181, 99, 39, 115, 87, 120, 31, 136, 139, 70, 25, 125, 182, 48, 20, 171, 193, 11, 60, 134, 82, 131, 6, 80, 83, 161, 64]) == False
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def isGood(self, nums: List[int]) -> bool:
        n = len(nums) - 1
        cnt = Counter(nums)
        cnt[n] -= 2
        for i in range(1, n):
            cnt[i] -= 1
        return all(v == 0 for v in cnt.values())

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

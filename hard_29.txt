Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

There is a computer that can run an unlimited number of tasks **at the same time**. You are given a 2D integer array `tasks` where `tasks[i] = [starti, endi, durationi]` indicates that the `ith` task should run for a total of `durationi` seconds (not necessarily continuous) within the **inclusive** time range `[starti, endi]`.


You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.


Return *the minimum time during which the computer should be turned on to complete all tasks*.


 


**Example 1:**



```

**Input:** tasks = [[2,3,1],[4,5,1],[1,5,2]]
**Output:** 2
**Explanation:** 
- The first task can be run in the inclusive time range [2, 2].
- The second task can be run in the inclusive time range [5, 5].
- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].
The computer will be on for a total of 2 seconds.

```

**Example 2:**



```

**Input:** tasks = [[1,3,2],[2,5,3],[5,6,2]]
**Output:** 4
**Explanation:** 
- The first task can be run in the inclusive time range [2, 3].
- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].
- The third task can be run in the two inclusive time range [5, 6].
The computer will be on for a total of 4 seconds.

```

 


**Constraints:**


* `1 <= tasks.length <= 2000`
* `tasks[i].length == 3`
* `1 <= starti, endi <= 2000`
* `1 <= durationi <= endi - starti + 1`



#Test case
solution = Solution()
assert solution.findMinimumTime([[3, 7, 5], [3, 7, 1], [4, 10, 5], [10, 10, 1]]) == 6
assert solution.findMinimumTime([[4, 5, 2], [5, 7, 3], [6, 7, 2], [9, 9, 1], [8, 10, 3]]) == 7
assert solution.findMinimumTime([[1, 1, 1], [6, 7, 2], [1, 7, 7], [7, 9, 1], [7, 9, 3], [7, 10, 3], [10, 10, 1], [9, 10, 2], [1, 10, 5], [10, 10, 1]]) == 10
assert solution.findMinimumTime([[3, 4, 2], [3, 5, 1], [1, 5, 4], [5, 5, 1], [5, 7, 3], [1, 7, 4], [1, 8, 7], [7, 8, 1], [5, 10, 1], [10, 10, 1]]) == 8
assert solution.findMinimumTime([[1, 3, 2], [8, 8, 1], [3, 9, 5], [8, 10, 1]]) == 6
assert solution.findMinimumTime([[2, 3, 1], [7, 8, 2], [8, 8, 1]]) == 3
assert solution.findMinimumTime([[2, 8, 1], [7, 8, 1]]) == 1
assert solution.findMinimumTime([[5, 7, 2], [9, 9, 1], [10, 10, 1]]) == 4
assert solution.findMinimumTime([[2, 6, 1], [5, 7, 2], [10, 10, 1]]) == 3
assert solution.findMinimumTime([[2, 2, 1], [6, 7, 1], [3, 8, 2], [4, 9, 2], [9, 9, 1], [4, 10, 5], [10, 10, 1], [10, 10, 1]]) == 6
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def findMinimumTime(self, tasks: List[List[int]]) -> int:
        tasks.sort(key=lambda x: x[1])
        vis = [0] * 2010
        ans = 0
        for start, end, duration in tasks:
            duration -= sum(vis[start : end + 1])
            i = end
            while i >= start and duration > 0:
                if not vis[i]:
                    duration -= 1
                    vis[i] = 1
                    ans += 1
                i -= 1
        return ans

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

Given two integer arrays `arr1` and `arr2`, return the minimum number of operations (possibly zero) needed to make `arr1` strictly increasing.


In one operation, you can choose two indices `0 <= i < arr1.length` and `0 <= j < arr2.length` and do the assignment `arr1[i] = arr2[j]`.


If there is no way to make `arr1` strictly increasing, return `-1`.


 


**Example 1:**



```

**Input:** arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
**Output:** 1
**Explanation:** Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].

```

**Example 2:**



```

**Input:** arr1 = [1,5,3,6,7], arr2 = [4,3,1]
**Output:** 2
**Explanation:** Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].

```

**Example 3:**



```

**Input:** arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
**Output:** -1
**Explanation:** You can't make arr1 strictly increasing.
```

 


**Constraints:**


* `1 <= arr1.length, arr2.length <= 2000`
* `0 <= arr1[i], arr2[i] <= 10^9`


 



#Test case
solution = Solution()
assert solution.makeArrayIncreasing([8, 77, 68, 15, 93, 1, 69, 10, 43], [11, 43, 75, 98]) == -1
assert solution.makeArrayIncreasing([72, 9, 43, 58, 42, 27], [11, 22, 64, 68, 86, 87]) == 4
assert solution.makeArrayIncreasing([35, 2, 78, 51, 57, 27, 24, 21, 99], [15, 54, 56, 65, 68, 72, 100]) == -1
assert solution.makeArrayIncreasing([39, 38, 23, 30, 81, 18, 87, 36, 68], [7, 49, 55, 58]) == -1
assert solution.makeArrayIncreasing([30, 45, 99, 13, 6, 84, 10, 12, 40, 34], [2, 11, 15, 18, 22, 55, 90, 96]) == -1
assert solution.makeArrayIncreasing([44, 97, 15, 17, 47], [5, 14, 23, 33, 37, 69, 80, 84]) == 2
assert solution.makeArrayIncreasing([36, 25, 99, 45], [4, 24, 39, 47, 62, 79, 84, 89, 96]) == 2
assert solution.makeArrayIncreasing([24, 95, 91, 36], [24, 42, 49, 54, 61, 77, 85, 93, 96]) == 2
assert solution.makeArrayIncreasing([7, 46], [1, 17, 26, 39, 42, 63, 66, 68, 81, 91]) == 0
assert solution.makeArrayIncreasing([26, 4, 97], [2, 22, 30, 34, 38, 55, 73, 84, 90]) == 1
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:
        arr2.sort()
        m = 0
        for x in arr2:
            if m == 0 or x != arr2[m - 1]:
                arr2[m] = x
                m += 1
        arr2 = arr2[:m]
        arr = [-inf] + arr1 + [inf]
        n = len(arr)
        f = [inf] * n
        f[0] = 0
        for i in range(1, n):
            if arr[i - 1] < arr[i]:
                f[i] = f[i - 1]
            j = bisect_left(arr2, arr[i])
            for k in range(1, min(i - 1, j) + 1):
                if arr[i - k - 1] < arr2[j - k]:
                    f[i] = min(f[i], f[i - k - 1] + k)
        return -1 if f[n - 1] >= inf else f[n - 1]

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

You are given a **0-indexed** integer array `nums` representing the strength of some heroes. The **power** of a group of heroes is defined as follows:


* Let `i0`, `i1`, ... ,`ik` be the indices of the heroes in a group. Then, the power of this group is `max(nums[i0], nums[i1], ... ,nums[ik])2 * min(nums[i0], nums[i1], ... ,nums[ik])`.


Return *the sum of the **power** of all **non-empty** groups of heroes possible.* Since the sum could be very large, return it **modulo** `109 + 7`.


 


**Example 1:**



```

**Input:** nums = [2,1,4]
**Output:** 141
**Explanation:** 
1st group: [2] has power = 22 * 2 = 8.
2nd group: [1] has power = 12 * 1 = 1. 
3rd group: [4] has power = 42 * 4 = 64. 
4th group: [2,1] has power = 22 * 1 = 4. 
5th group: [2,4] has power = 42 * 2 = 32. 
6th group: [1,4] has power = 42 * 1 = 16. 
​​​​​​​7th group: [2,1,4] has power = 42​​​​​​​ * 1 = 16. 
The sum of powers of all groups is 8 + 1 + 64 + 4 + 32 + 16 + 16 = 141.


```

**Example 2:**



```

**Input:** nums = [1,1,1]
**Output:** 7
**Explanation:** A total of 7 groups are possible, and the power of each group will be 1. Therefore, the sum of the powers of all groups is 7.

```

 


**Constraints:**


* `1 <= nums.length <= 105`
* `1 <= nums[i] <= 109`



#Test case
solution = Solution()
assert solution.sumOfPower([25, 40, 56, 74, 77, 87, 104, 133, 147, 148, 165, 171, 222, 233, 238, 289, 351, 364, 395, 417, 424, 464, 476, 494, 499, 549, 551, 610, 619, 658, 685, 691, 716, 725, 796, 800, 802, 841, 855, 858, 868, 897, 905, 930, 953, 955, 959]) == 764994471
assert solution.sumOfPower([5, 26, 36, 44, 46, 73, 79, 85, 87, 93, 112, 116, 135, 140, 156, 164, 180, 183, 192, 199, 200, 222, 236, 241, 245, 249, 268, 295, 298, 310, 312, 315, 322, 333, 346, 351, 384, 391, 402, 413, 440, 446, 492, 512, 514, 524, 526, 533, 536, 537, 561, 592, 601, 642, 644, 664, 667, 672, 688, 692, 712, 723, 736, 748, 763, 770, 788, 792, 793, 809, 826, 835, 839, 844, 848, 860, 861, 880, 888, 913, 916, 917, 922, 935, 938, 939, 945, 958, 965, 972, 973, 982]) == 254303475
assert solution.sumOfPower([4, 12, 35, 48, 57, 97, 106, 150, 153, 170, 201, 258, 306, 347, 431, 468, 474, 509, 531, 539, 549, 660, 668, 690, 748, 749, 753, 762, 785, 787, 837, 898, 908, 963, 972, 979]) == 228557431
assert solution.sumOfPower([12, 17, 25, 55, 97, 122, 154, 179, 190, 234, 235, 269, 315, 316, 365, 391, 400, 427, 456, 462, 509, 613, 662, 725, 731, 746, 828, 859, 894, 900, 907, 951, 954]) == 997777288
assert solution.sumOfPower([16, 20, 48, 49, 50, 55, 63, 72, 90, 111, 118, 139, 168, 201, 210, 246, 248, 282, 296, 297, 320, 365, 376, 380, 388, 408, 409, 424, 427, 429, 446, 461, 466, 469, 470, 478, 484, 503, 504, 509, 534, 553, 570, 575, 614, 617, 621, 622, 624, 641, 654, 655, 665, 672, 674, 693, 703, 708, 712, 730, 736, 739, 743, 759, 786, 810, 814, 818, 819, 847, 890, 895, 903, 917, 922, 944, 969, 992, 1000]) == 821331682
assert solution.sumOfPower([15, 40, 48, 65, 83, 117, 124, 145, 157, 183, 213, 251, 264, 279, 295, 301, 345, 351, 362, 379, 395, 432, 449, 450, 463, 483, 492, 509, 522, 525, 528, 542, 576, 579, 589, 611, 624, 629, 637, 664, 670, 696, 708, 713, 722, 723, 729, 732, 752, 774, 796, 805, 814, 839, 857, 878, 887, 903, 904, 917, 936, 942, 947, 962, 971, 976, 992, 997]) == 730952754
assert solution.sumOfPower([3, 69, 135, 136, 150, 157, 182, 189, 218, 227, 252, 272, 293, 297, 329, 354, 358, 366, 374, 382, 410, 443, 453, 463, 465, 469, 475, 491, 497, 506, 532, 553, 555, 559, 592, 600, 607, 614, 675, 677, 682, 700, 701, 709, 728, 792, 822, 824, 832, 839, 880, 894, 899, 905, 908, 916, 926, 935, 952, 970, 982]) == 801221232
assert solution.sumOfPower([7, 17, 66, 70, 120, 124, 198, 302, 313, 330, 345, 373, 405, 451, 498, 605, 607, 613, 633, 710, 711, 798, 858, 938, 940, 945, 984]) == 959685698
assert solution.sumOfPower([53, 318, 549, 656, 773, 873, 887]) == 709398616
assert solution.sumOfPower([67, 105, 188, 193, 212, 234, 245, 270, 286, 334, 345, 350, 427, 469, 495, 501, 503, 525, 532, 578, 653, 680, 724, 738, 739, 759, 763, 895, 917, 923, 967]) == 665880907
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def sumOfPower(self, nums: List[int]) -> int:
        mod = 10**9 + 7
        nums.sort()
        ans = 0
        p = 0
        for x in nums[::-1]:
            ans = (ans + (x * x % mod) * x) % mod
            ans = (ans + x * p) % mod
            p = (p * 2 + x * x) % mod
        return ans

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

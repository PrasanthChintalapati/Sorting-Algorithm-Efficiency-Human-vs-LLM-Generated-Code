Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

Given a **1-indexed** `m x n` integer matrix `mat`, you can select any cell in the matrix as your **starting cell**.


From the starting cell, you can move to any other cell **in the** **same row or column**, but only if the value of the destination cell is **strictly greater** than the value of the current cell. You can repeat this process as many times as possible, moving from cell to cell until you can no longer make any moves.


Your task is to find the **maximum number of cells** that you can visit in the matrix by starting from some cell.


Return *an integer denoting the maximum number of cells that can be visited.*


 


**Example 1:**


**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2713.Maximum%20Strictly%20Increasing%20Cells%20in%20a%20Matrix/images/diag1drawio.png)**



```

**Input:** mat = [[3,1],[3,4]]
**Output:** 2
**Explanation:** The image shows how we can visit 2 cells starting from row 1, column 2. It can be shown that we cannot visit more than 2 cells no matter where we start from, so the answer is 2. 

```

**Example 2:**


**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2713.Maximum%20Strictly%20Increasing%20Cells%20in%20a%20Matrix/images/diag3drawio.png)**



```

**Input:** mat = [[1,1],[1,1]]
**Output:** 1
**Explanation:** Since the cells must be strictly increasing, we can only visit one cell in this example. 

```

**Example 3:**


**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2700-2799/2713.Maximum%20Strictly%20Increasing%20Cells%20in%20a%20Matrix/images/diag4drawio.png)**



```

**Input:** mat = [[3,1,6],[-9,5,7]]
**Output:** 4
**Explanation:** The image above shows how we can visit 4 cells starting from row 2, column 1. It can be shown that we cannot visit more than 4 cells no matter where we start from, so the answer is 4. 

```

 


**Constraints:**


* `m == mat.length`
* `n == mat[i].length`
* `1 <= m, n <= 105`
* `1 <= m * n <= 105`
* `-105 <= mat[i][j] <= 105`



#Test case
solution = Solution()
assert solution.maxIncreasingCells([[-54427, 88451, 46633], [26731, -83107, -24124], [13958, -7969, -70806]]) == 4
assert solution.maxIncreasingCells([[34506, -4479, 86403], [-26040, 56925, 7537]]) == 3
assert solution.maxIncreasingCells([[-71835, -16974, 94617], [97053, -15912, 33374], [42792, 48002, -21800]]) == 5
assert solution.maxIncreasingCells([[81312], [-95155], [-73698], [-52068], [98610]]) == 5
assert solution.maxIncreasingCells([[89702], [-41759], [-10907], [-88197], [-49431]]) == 5
assert solution.maxIncreasingCells([[94384, 54326, 44786], [76776, 66119, -87499], [-37833, 95265, -95706], [20752, 72903, 10283]]) == 8
assert solution.maxIncreasingCells([[86274], [85560], [-71078]]) == 3
assert solution.maxIncreasingCells([[-55178, 80097], [-33419, 95930]]) == 3
assert solution.maxIncreasingCells([[2582, 8564, -84421, -98096], [71976, 64697, 79346, -81647], [33150, -85001, -69278, 1199], [10765, 51533, -82286, 52020]]) == 8
assert solution.maxIncreasingCells([[-41870, 44279, -15637], [42526, 12842, 15470], [-2577, 54538, -1876], [90166, 9589, -22767]]) == 6
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def maxIncreasingCells(self, mat: List[List[int]]) -> int:
        m, n = len(mat), len(mat[0])
        g = defaultdict(list)
        for i in range(m):
            for j in range(n):
                g[mat[i][j]].append((i, j))
        rowMax = [0] * m
        colMax = [0] * n
        ans = 0
        for _, pos in sorted(g.items()):
            mx = []
            for i, j in pos:
                mx.append(1 + max(rowMax[i], colMax[j]))
                ans = max(ans, mx[-1])
            for k, (i, j) in enumerate(pos):
                rowMax[i] = max(rowMax[i], mx[k])
                colMax[j] = max(colMax[j], mx[k])
        return ans

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

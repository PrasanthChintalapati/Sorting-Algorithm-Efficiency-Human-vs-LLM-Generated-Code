Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

On a campus represented on the X-Y plane, there are `n` workers and `m` bikes, with `n <= m`.


You are given an array `workers` of length `n` where `workers[i] = [xi, yi]` is the position of the `ith` worker. You are also given an array `bikes` of length `m` where `bikes[j] = [xj, yj]` is the position of the `jth` bike. All the given positions are **unique**.


Assign a bike to each worker. Among the available bikes and workers, we choose the `(workeri, bikej)` pair with the shortest **Manhattan distance** between each other and assign the bike to that worker.


If there are multiple `(workeri, bikej)` pairs with the same shortest **Manhattan distance**, we choose the pair with **the smallest worker index**. If there are multiple ways to do that, we choose the pair with **the smallest bike index**. Repeat this process until there are no available workers.


Return *an array* `answer` *of length* `n`*, where* `answer[i]` *is the index (**0-indexed**) of the bike that the* `ith` *worker is assigned to*.


The **Manhattan distance** between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.


 


**Example 1:**


![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1057.Campus%20Bikes/images/1261_example_1_v2.png)

```

**Input:** workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
**Output:** [1,0]
**Explanation:** Worker 1 grabs Bike 0 as they are closest (without ties), and Worker 0 is assigned Bike 1. So the output is [1, 0].

```

**Example 2:**


![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1000-1099/1057.Campus%20Bikes/images/1261_example_2_v2.png)

```

**Input:** workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
**Output:** [0,2,1]
**Explanation:** Worker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share the same distance to Bike 2, thus Worker 1 is assigned to Bike 2, and Worker 2 will take Bike 1. So the output is [0,2,1].

```

 


**Constraints:**


* `n == workers.length`
* `m == bikes.length`
* `1 <= n <= m <= 1000`
* `workers[i].length == bikes[j].length == 2`
* `0 <= xi, yi < 1000`
* `0 <= xj, yj < 1000`
* All worker and bike locations are **unique**.



#Test case
solution = Solution()
assert solution.assignBikes([[485, 422], [113, 863], [303, 252], [320, 644]], [[823, 237], [843, 993], [996, 500], [102, 556]]) == [0, 1, 2, 3]
assert solution.assignBikes([[34, 146], [702, 676], [934, 994], [141, 688], [991, 480], [462, 333]], [[530, 927], [97, 750], [925, 697], [56, 494], [60, 905], [797, 675]]) == [3, 5, 0, 1, 2, 4]
assert solution.assignBikes([[127, 120], [599, 780], [541, 469], [757, 89], [513, 97], [630, 450]], [[689, 482], [876, 399], [817, 277], [913, 833], [332, 918], [985, 931]]) == [5, 3, 1, 2, 4, 0]
assert solution.assignBikes([[927, 776], [528, 980], [234, 717], [471, 559], [136, 188], [672, 560], [85, 210], [989, 744], [158, 728]], [[640, 66], [858, 956], [622, 481], [964, 109], [611, 42], [851, 464], [801, 900], [59, 933], [757, 902]]) == [1, 8, 3, 5, 4, 2, 0, 6, 7]
assert solution.assignBikes([[75, 172]], [[382, 740]]) == [0]
assert solution.assignBikes([[134, 301], [975, 505], [267, 589], [470, 106]], [[523, 860], [169, 76], [771, 971], [102, 308]]) == [3, 2, 0, 1]
assert solution.assignBikes([[624, 933], [798, 703], [882, 872], [431, 304], [77, 2], [255, 213], [318, 604], [56, 84], [750, 210], [138, 590]], [[853, 609], [607, 621], [760, 239], [261, 830], [546, 282], [787, 619], [80, 456], [849, 483], [306, 715], [147, 348]]) == [1, 5, 0, 4, 7, 9, 8, 3, 2, 6]
assert solution.assignBikes([[52, 117], [847, 262], [897, 286], [375, 633]], [[873, 972], [685, 349], [539, 608], [103, 869]]) == [3, 1, 0, 2]
assert solution.assignBikes([[215, 668], [50, 150]], [[733, 807], [725, 109]]) == [0, 1]
assert solution.assignBikes([[663, 640], [670, 699], [993, 75], [507, 673], [226, 983], [125, 89], [557, 85]], [[92, 404], [554, 609], [970, 1000], [340, 202], [627, 587], [749, 808], [373, 814]]) == [4, 5, 2, 1, 6, 3, 0]
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def assignBikes(
        self, workers: List[List[int]], bikes: List[List[int]]
    ) -> List[int]:
        n, m = len(workers), len(bikes)
        arr = []
        for i, j in product(range(n), range(m)):
            dist = abs(workers[i][0] - bikes[j][0]) + abs(workers[i][1] - bikes[j][1])
            arr.append((dist, i, j))
        arr.sort()
        vis1 = [False] * n
        vis2 = [False] * m
        ans = [0] * n
        for _, i, j in arr:
            if not vis1[i] and not vis2[j]:
                vis1[i] = vis2[j] = True
                ans[i] = j
        return ans

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

You are given a positive integer array `skill` of **even** length `n` where `skill[i]` denotes the skill of the `ith` player. Divide the players into `n / 2` teams of size `2` such that the total skill of each team is **equal**.


The **chemistry** of a team is equal to the **product** of the skills of the players on that team.


Return *the sum of the **chemistry** of all the teams, or return* `-1` *if there is no way to divide the players into teams such that the total skill of each team is equal.*


 


**Example 1:**



```

**Input:** skill = [3,2,5,1,3,4]
**Output:** 22
**Explanation:** 
Divide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.
The sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.

```

**Example 2:**



```

**Input:** skill = [3,4]
**Output:** 12
**Explanation:** 
The two players form a team with a total skill of 7.
The chemistry of the team is 3 * 4 = 12.

```

**Example 3:**



```

**Input:** skill = [1,1,2,3]
**Output:** -1
**Explanation:** 
There is no way to divide the players into teams such that the total skill of each team is equal.

```

 


**Constraints:**


* `2 <= skill.length <= 105`
* `skill.length` is even.
* `1 <= skill[i] <= 1000`



#Test case
solution = Solution()
assert solution.dividePlayers([161, 756, 829]) == 133469
assert solution.dividePlayers([317, 684]) == 216828
assert solution.dividePlayers([91, 724]) == 65884
assert solution.dividePlayers([32, 151]) == 4832
assert solution.dividePlayers([161, 704]) == 113344
assert solution.dividePlayers([609, 730]) == 444570
assert solution.dividePlayers([524, 592, 897]) == 470028
assert solution.dividePlayers([807, 832]) == 671424
assert solution.dividePlayers([405, 829]) == 335745
assert solution.dividePlayers([526, 588]) == 309288
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def dividePlayers(self, skill: List[int]) -> int:
        skill.sort()
        t = skill[0] + skill[-1]
        i, j = 0, len(skill) - 1
        ans = 0
        while i < j:
            if skill[i] + skill[j] != t:
                return -1
            ans += skill[i] * skill[j]
            i, j = i + 1, j - 1
        return ans

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

Given two integer arrays `arr1` and `arr2`, and the integer `d`, *return the distance value between the two arrays*.


The distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.


 


**Example 1:**



```

**Input:** arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2
**Output:** 2
**Explanation:** 
For arr1[0]=4 we have: 
|4-10|=6 > d=2 
|4-9|=5 > d=2 
|4-1|=3 > d=2 
|4-8|=4 > d=2 
For arr1[1]=5 we have: 
|5-10|=5 > d=2 
|5-9|=4 > d=2 
|5-1|=4 > d=2 
|5-8|=3 > d=2
For arr1[2]=8 we have:
**|8-10|=2 <= d=2**
**|8-9|=1 <= d=2**
|8-1|=7 > d=2
**|8-8|=0 <= d=2**

```

**Example 2:**



```

**Input:** arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3
**Output:** 2

```

**Example 3:**



```

**Input:** arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6
**Output:** 1

```

 


**Constraints:**


* `1 <= arr1.length, arr2.length <= 500`
* `-1000 <= arr1[i], arr2[j] <= 1000`
* `0 <= d <= 100`



#Test case
solution = Solution()
assert solution.findTheDistanceValue([33, 48, 10, 49, 8, 14, 96], [54, 62, 65, 84], 98) == 0
assert solution.findTheDistanceValue([13, 21, 75, 65, 3], [11, 26, 44, 56, 81], 5) == 3
assert solution.findTheDistanceValue([10, 41, 35, 88], [10, 35, 51], 93) == 0
assert solution.findTheDistanceValue([100, 94, 14, 64, 88, 83, 15], [38], 88) == 0
assert solution.findTheDistanceValue([50], [17, 36, 39, 65], 35) == 0
assert solution.findTheDistanceValue([97, 38, 20, 100, 19, 94, 32, 67, 91, 60], [4, 12, 24, 85], 60) == 0
assert solution.findTheDistanceValue([27, 21, 74, 43], [5, 11, 13, 23, 28, 42, 48, 62], 45) == 0
assert solution.findTheDistanceValue([67, 53, 43], [2, 22, 28], 83) == 0
assert solution.findTheDistanceValue([51], [2, 14, 30, 32, 55, 67, 72, 76, 79], 13) == 0
assert solution.findTheDistanceValue([21], [2, 9, 15, 22, 31, 39, 45, 74, 78, 95], 10) == 0
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def findTheDistanceValue(self, arr1: List[int], arr2: List[int], d: int) -> int:
        def check(a: int) -> bool:
            i = bisect_left(arr2, a - d)
            return i == len(arr2) or arr2[i] > a + d

        arr2.sort()
        return sum(check(a) for a in arr1)

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

Given a **sorted** integer array `nums` and three integers `a`, `b` and `c`, apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element `nums[i]` in the array, and return *the array in a sorted order*.


 


**Example 1:**



```
**Input:** nums = [-4,-2,2,4], a = 1, b = 3, c = 5
**Output:** [3,9,15,33]

```
**Example 2:**



```
**Input:** nums = [-4,-2,2,4], a = -1, b = 3, c = 5
**Output:** [-23,-5,1,7]

```

 


**Constraints:**


* `1 <= nums.length <= 200`
* `-100 <= nums[i], a, b, c <= 100`
* `nums` is sorted in **ascending** order.


 


**Follow up:** Could you solve it in `O(n)` time?



#Test case
solution = Solution()
assert solution.sortTransformedArray
assert solution.sortTransformedArray
assert solution.sortTransformedArray([-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -81, -80, -79, -78, -77, -76, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -63, -62, -61, -60, -59, -58, -56, -55, -54, -53, -52, -51, -50, -48, -47, -46, -45, -44, -43, -42, -40, -39, -38, -37, -36, -35, -34, -33, -32, -31, -30, -29, -28, -27, -26, -25, -24, -23, -22, -20, -19, -18, -17, -16, -15, -14, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100], 42, 1, 4) == [4, 45, 47, 170, 174, 379, 385, 672, 680, 1049, 1059, 1510, 1522, 2055, 2069, 2684, 2700, 3397, 3415, 4194, 4214, 5075, 5097, 6064, 7115, 8222, 8250, 9439, 9469, 10740, 10772, 12125, 12159, 13594, 13630, 15147, 15185, 16784, 16824, 18547, 20310, 20354, 22199, 22245, 24172, 24220, 26229, 26279, 28370, 28422, 30595, 32904, 32960, 35297, 35355, 37774, 37834, 40335, 40397, 42980, 43044, 45709, 45775, 48522, 48590, 51419, 51489, 54400, 54472, 57465, 57539, 60614, 60690, 63847, 63925, 67164, 67244, 70647, 74050, 74134, 77619, 77705, 81272, 81360, 85009, 85099, 88830, 92735, 92829, 96724, 96820, 100895, 104954, 105054, 109195, 109297, 113520, 117929, 118035, 122422, 122530, 126999, 127109, 131660, 131772, 136519, 141234, 146147, 146265, 151144, 151264, 156225, 156347, 161390, 161514, 166639, 166765, 172100, 177389, 177519, 182890, 188475, 188609, 194144, 194280, 199897, 200035, 205734, 205874, 211655, 211797, 217660, 217804, 223749, 223895, 229922, 236329, 242520, 248945, 249099, 255454, 255610, 262047, 262205, 268724, 268884, 275485, 275647, 282494, 289259, 289425, 296272, 296440, 303369, 303539, 310550, 310722, 317815, 317989, 325164, 325340, 332597, 332775, 340114, 340294, 347715, 355400, 355584, 363169, 363355, 371022, 371210, 378959, 379149, 386980, 387172, 395085, 403274, 403470, 411547, 411745, 419904, 420104]
assert solution.sortTransformedArray([-100, -96, -91, -88, -83, -82, -78, -74, -73, -72, -70, -67, -66, -62, -61, -56, -55, -54, -52, -49, -45, -44, -43, -42, -41, -38, -37, -32, -31, -30, -28, -27, -26, -18, -17, -14, -9, -4, -2, 4, 8, 9, 13, 16, 19, 26, 28, 30, 32, 35, 37, 38, 40, 42, 43, 44, 47, 51, 52, 53, 56, 65, 74, 77, 78, 80, 81, 85, 89, 91, 96, 100], -98, -64, 35) == [-986365, -973565, -909277, -896989, -817327, -805679, -781919, -753245, -713455, -669775, -653669, -648127, -632285, -601189, -591205, -585935, -541349, -531877, -517535, -503389, -475685, -435599, -422629, -418175, -372709, -360719, -310877, -303709, -292895, -282277, -278639, -268285, -261629, -258127, -232127, -219455, -195535, -192509, -186877, -183919, -178415, -175525, -170149, -162079, -159325, -143909, -139045, -136495, -131759, -122255, -102365, -98269, -92159, -90085, -86245, -78589, -75005, -69679, -67877, -64549, -36559, -30565, -27199, -26077, -18277, -17359, -8479, -7327, -6749, -1789, -1277, -229]
assert solution.sortTransformedArray([-100, -97, -95, -94, -92, -91, -89, -86, -85, -84, -83, -82, -81, -80, -79, -75, -70, -69, -67, -63, -61, -60, -57, -56, -55, -54, -52, -51, -47, -45, -44, -41, -39, -37, -35, -34, -33, -32, -31, -30, -29, -26, -24, -22, -21, -20, -16, -13, -11, -10, -9, -8, -7, -6, -3, -1, 0, 1, 2, 3, 4, 5, 6, 9, 13, 14, 15, 17, 18, 19, 20, 24, 32, 33, 39, 40, 41, 46, 47, 48, 49, 50, 51, 56, 58, 61, 63, 64, 66, 67, 69, 70, 72, 73, 75, 76, 81, 83, 85, 91, 92, 94, 95, 96, 98], -79, -33, 62) == [-786638, -761888, -740048, -731170, -716048, -709778, -701084, -694880, -671630, -665558, -657140, -651134, -622760, -581384, -573518, -567908, -554590, -546908, -541430, -528428, -520930, -515584, -502898, -490370, -458750, -446788, -441838, -423338, -411850, -389348, -384728, -378334, -373780, -356780, -352358, -346240, -325634, -315568, -311410, -295910, -291884, -282358, -267608, -254728, -249530, -245834, -237098, -228520, -211838, -207100, -203734, -199088, -191234, -183538, -176000, -172898, -168620, -158428, -151430, -134090, -131384, -127658, -121384, -118810, -106868, -95558, -90140, -87058, -84880, -81890, -79778, -74834, -70048, -65420, -52484, -46234, -44650, -37448, -34084, -32198, -30878, -29084, -26128, -23330, -19634, -18208, -15884, -13718, -12860, -9134, -7508, -6634, -6040, -4730, -3578, -2980, -2584, -2078, -1334, -748, -550, -320, -50, 16, 62]
assert solution.sortTransformedArray([-100, -99, -98, -96, -95, -92, -90, -89, -87, -85, -84, -83, -82, -80, -79, -78, -77, -75, -74, -73, -72, -70, -69, -67, -66, -64, -63, -62, -61, -59, -58, -57, -54, -50, -48, -47, -45, -44, -43, -41, -40, -39, -38, -36, -34, -30, -29, -26, -24, -22, -20, -18, -16, -15, -14, -12, -11, -10, -9, -8, -4, -1, 3, 4, 5, 7, 8, 10, 12, 14, 15, 16, 18, 19, 21, 22, 23, 26, 27, 29, 30, 32, 33, 34, 35, 37, 42, 45, 48, 49, 51, 53, 54, 57, 58, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 75, 77, 79, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98], 26, -61, -59) == [-8, 28, 113, 286, 601, 788, 1117, 1931, 2093, 2596, 2953, 3151, 3758, 4183, 4417, 4876, 5621, 5891, 6706, 7267, 7573, 8168, 9463, 10126, 11183, 11561, 12292, 13867, 15931, 16381, 17248, 19103, 20038, 21511, 23576, 24613, 25171, 26242, 27923, 29656, 32071, 33278, 35833, 39803, 41866, 43243, 43981, 46148, 49846, 50638, 52961, 55336, 56917, 59378, 60242, 62773, 64456, 67991, 69742, 72463, 79051, 80938, 83867, 87892, 89881, 90943, 92966, 94046, 99292, 100408, 102533, 103667, 105826, 106978, 109171, 110341, 112568, 116017, 117223, 119518, 120742, 126676, 127936, 131611, 139117, 141616, 142948, 146831, 149398, 150766, 157388, 158792, 162883, 167026, 171221, 173992, 178273, 179767, 184118, 186991, 188521, 191428, 192976, 195917, 200458, 202042, 205051, 209696, 211316, 214393, 216031, 219142, 223943, 225617, 228796, 238658, 240386, 243667, 245413, 255623, 260806, 266041]
assert solution.sortTransformedArray([-100, -99, -98, -97, -96, -95, -94, -93, -92, -91, -90, -89, -88, -87, -86, -85, -84, -83, -82, -81, -80, -79, -78, -77, -76, -75, -74, -73, -72, -71, -70, -69, -68, -67, -66, -65, -64, -63, -62, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47, -45, -44, -43, -42, -41, -40, -39, -38, -37, -33, -30, -29, -28, -25, -24, -23, -22, -21, -20, -19, -18, -16, -15, -14, -13, -11, -10, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 4, 5, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 92, 94, 96, 97, 98, 99, 100], -46, 9, 74) == [-460826, -459026, -451663, -449881, -442592, -440828, -433613, -431867, -424726, -422998, -415931, -407228, -405536, -398617, -390098, -388442, -381671, -373336, -365093, -356942, -355358, -348883, -347317, -340916, -339368, -333041, -331511, -325258, -323746, -317567, -316073, -309968, -308492, -302461, -301003, -295046, -293606, -287723, -286301, -280492, -279088, -273353, -271967, -266306, -264938, -259351, -258001, -252488, -251156, -245717, -244403, -239038, -237742, -232451, -231173, -225956, -224696, -219553, -218311, -213242, -207023, -205817, -200896, -199708, -194861, -193691, -188918, -187766, -183067, -181933, -177308, -176192, -170543, -166066, -164986, -160583, -155192, -154148, -149893, -148867, -144686, -139571, -138581, -134548, -133576, -129617, -128663, -124778, -123842, -120031, -115376, -114476, -110813, -109931, -106342, -105478, -101963, -101117, -96848, -93481, -92671, -89378, -85367, -84593, -81448, -77621, -76883, -73886, -73166, -70243, -69541, -66692, -66008, -63233, -62567, -59218, -55961, -52796, -50317, -49723, -46742, -43853, -41596, -41056, -38873, -36242, -35738, -33217, -30788, -28901, -28451, -26638, -24467, -24053, -22388, -21992, -20401, -20023, -18506, -18146, -16703, -16361, -14992, -14668, -13067, -11846, -11558, -10411, -10141, -9068, -8816, -7817, -7583, -6442, -5591, -5393, -4616, -2942, -2798, -2243, -1636, -1528, -1121, -1031, -698, -626, -367, -128, -92, 19, 37, 74]
assert solution.sortTransformedArray([-99, -97, -95, -93, -90, -89, -86, -79, -76, -74, -67, -66, -64, -63, -62, -61, -59, -56, -55, -53, -52, -50, -48, -44, -37, -33, -28, -25, -21, -13, -6, -5, 0, 1, 11, 13, 16, 17, 19, 23, 25, 26, 27, 29, 32, 34, 35, 36, 38, 41, 43, 44, 46, 48, 49, 52, 53, 54, 60, 61, 62, 63, 69, 71, 74, 75, 76, 83, 85, 90, 98, 100], 77, -67, -64) == [-64, -54, 2196, 3110, 8516, 12078, 13820, 18576, 21050, 26460, 35300, 39128, 46386, 49736, 50246, 54260, 62180, 62750, 76640, 86000, 86670, 91916, 97316, 107828, 108578, 126626, 139428, 146060, 151956, 159786, 174128, 180560, 181530, 195786, 204660, 211628, 212678, 219780, 220850, 236546, 245160, 271926, 273116, 282366, 290540, 291770, 300078, 301328, 309770, 319616, 339770, 350078, 361910, 383336, 416630, 426546, 428036, 439596, 449780, 485786, 524828, 550566, 575190, 615816, 617606, 629666, 672140, 701226, 730928, 732878, 761246, 763236]
assert solution.sortTransformedArray([-100, -99, -98, -97, -96, -95, -94, -92, -91, -89, -88, -87, -85, -84, -83, -81, -80, -79, -78, -76, -75, -74, -73, -71, -70, -69, -68, -67, -66, -64, -63, -62, -61, -60, -59, -57, -56, -55, -54, -53, -52, -51, -49, -48, -47, -46, -45, -44, -43, -42, -40, -39, -38, -37, -36, -35, -33, -31, -30, -27, -25, -24, -23, -22, -21, -20, -19, -18, -17, -16, -15, -13, -11, -9, -8, -5, -2, -1, 1, 4, 5, 6, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 26, 27, 28, 30, 31, 32, 33, 35, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 59, 60, 61, 63, 64, 65, 66, 69, 70, 72, 74, 75, 77, 78, 79, 80, 83, 85, 86, 88, 89, 90, 92, 94, 95, 96, 98, 99, 100], 40, 17, 28) == [51, 85, 154, 736, 943, 1113, 1570, 2452, 3115, 3421, 4681, 5055, 5992, 6567, 7009, 8106, 8773, 9283, 9996, 10540, 11299, 11877, 12682, 13294, 14145, 14791, 15688, 17311, 18025, 19014, 19762, 20797, 22660, 23476, 24603, 27510, 28729, 29647, 31864, 35518, 36538, 37941, 38995, 41532, 43027, 44149, 48433, 49623, 51256, 54159, 57142, 60205, 61531, 63348, 69874, 73257, 74719, 76720, 78216, 80263, 81793, 83886, 85450, 87589, 89187, 91372, 93004, 95235, 96901, 100878, 103201, 104935, 107304, 109072, 111487, 115750, 120093, 121963, 124516, 126420, 129019, 138265, 140271, 143008, 145048, 147831, 149905, 152734, 157717, 159859, 162780, 164956, 170133, 173146, 175390, 178449, 183832, 189295, 191641, 194838, 197218, 200461, 208612, 211947, 217810, 220326, 223753, 226303, 229776, 238497, 242062, 244714, 248325, 251011, 254668, 257388, 261091, 274177, 276999, 280840, 287583, 290473, 297330, 301309, 308292, 311284, 315355, 318381, 325558, 329721, 337024, 340152, 351870, 355066, 359413, 362643, 367036, 370300, 374739, 382522, 385854, 390385, 393751, 398328, 401728]
assert solution.sortTransformedArray([-99, -98, -94, -93, -92, -91, -89, -88, -81, -76, -73, -67, -65, -60, -54, -53, -52, -48, -47, -42, -38, -36, -31, -30, -29, -22, -18, -17, -16, -14, -12, -6, -5, -4, -1, 0, 1, 9, 10, 13, 14, 15, 20, 22, 23, 24, 25, 28, 30, 31, 40, 48, 51, 53, 56, 57, 59, 60, 61, 62, 67, 74, 78, 82, 83, 84, 87, 90, 93, 94, 97, 99], -93, -98, 1) == [-921194, -901790, -884542, -883567, -830959, -813470, -812535, -795242, -778135, -762119, -761214, -727930, -712442, -711567, -664439, -648810, -633367, -602234, -573455, -529719, -516519, -488442, -424042, -410910, -386554, -363567, -352030, -340679, -329514, -328919, -307742, -297135, -266430, -265895, -256042, -246890, -246375, -218975, -209567, -200830, -159935, -152719, -130567, -116999, -92410, -86639, -86334, -80759, -75655, -75370, -60574, -55919, -51450, -47167, -42855, -39159, -28367, -25210, -22394, -22239, -19599, -16990, -16855, -12215, -10279, -8414, -2759, -1834, -1095, -190, 1, 6]
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def sortTransformedArray(
        self, nums: List[int], a: int, b: int, c: int
    ) -> List[int]:
        def f(x):
            return a * x * x + b * x + c

        n = len(nums)
        i, j, k = 0, n - 1, 0 if a < 0 else n - 1
        res = [0] * n
        while i <= j:
            v1, v2 = f(nums[i]), f(nums[j])
            if a < 0:
                if v1 <= v2:
                    res[k] = v1
                    i += 1
                else:
                    res[k] = v2
                    j -= 1
                k += 1
            else:
                if v1 >= v2:
                    res[k] = v1
                    i += 1
                else:
                    res[k] = v2
                    j -= 1
                k -= 1
        return res

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

You are given a **0-indexed** integer array `nums` representing the score of students in an exam. The teacher would like to form one **non-empty** group of students with maximal **strength**, where the strength of a group of students of indices `i0`, `i1`, `i2`, ... , `ik` is defined as `nums[i0] * nums[i1] * nums[i2] * ... * nums[ik​]`.


Return *the maximum strength of a group the teacher can create*.


 


**Example 1:**



```

**Input:** nums = [3,-1,-5,2,5,-9]
**Output:** 1350
**Explanation:** One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.

```

**Example 2:**



```

**Input:** nums = [-4,-5,-4]
**Output:** 20
**Explanation:** Group the students at indices [0, 1] . Then, we’ll have a resulting strength of 20. We cannot achieve greater strength.

```

 


**Constraints:**


* `1 <= nums.length <= 13`
* `-9 <= nums[i] <= 9`



#Test case
solution = Solution()
assert solution.maxStrength([-9, -9, -6, -5, -1, 2, 2, 3, 9]) == 262440
assert solution.maxStrength([-9, -3, -3, 9]) == 243
assert solution.maxStrength([-8, -7, 9]) == 504
assert solution.maxStrength([-6, -2, -1, 6]) == 72
assert solution.maxStrength([-8, -5]) == 40
assert solution.maxStrength([-7, -5, -5, -4, -3, 2, 3, 5, 8]) == 168000
assert solution.maxStrength([-9, -9, -8, 0, 1, 1, 4, 4, 7, 8]) == 72576
assert solution.maxStrength([-5, -3, -2, -1, 4, 9]) == 1080
assert solution.maxStrength([-8, -6, -5, -4, -3, -2, 0, 1, 3, 7, 8, 8, 8]) == 61931520
assert solution.maxStrength([-9]) == -9
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def maxStrength(self, nums: List[int]) -> int:
        nums.sort()
        n = len(nums)
        if n == 1:
            return nums[0]
        if nums[1] == nums[-1] == 0:
            return 0
        ans, i = 1, 0
        while i < n:
            if nums[i] < 0 and i + 1 < n and nums[i + 1] < 0:
                ans *= nums[i] * nums[i + 1]
                i += 2
            elif nums[i] <= 0:
                i += 1
            else:
                ans *= nums[i]
                i += 1
        return ans

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```

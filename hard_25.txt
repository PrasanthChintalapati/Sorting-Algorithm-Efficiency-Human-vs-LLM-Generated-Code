Please based on the task description write Solution to pass the provided test cases.
You must follow the following rules:
First, the code should be in ```python
[Code]
``` block.
Second, You should not add the provided test cases into your ```python[Code]``` block.
Third, You are not need to write the test cases, we will provide the test cases for you.
Finally, You should make sure that the provided test cases can pass your solution.

# Task description
```python

We have `n` jobs, where every job is scheduled to be done from `startTime[i]` to `endTime[i]`, obtaining a profit of `profit[i]`.


You're given the `startTime`, `endTime` and `profit` arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.


If you choose a job that ends at time `X` you will be able to start another job that starts at time `X`.


 


**Example 1:**


**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1235.Maximum%20Profit%20in%20Job%20Scheduling/images/sample1_1584.png)**



```

**Input:** startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
**Output:** 120
**Explanation:** The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.

```

**Example 2:**


**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1235.Maximum%20Profit%20in%20Job%20Scheduling/images/sample22_1584.png)** 



```

**Input:** startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
**Output:** 150
**Explanation:** The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.

```

**Example 3:**


**![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1235.Maximum%20Profit%20in%20Job%20Scheduling/images/sample3_1584.png)**



```

**Input:** startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
**Output:** 6

```

 


**Constraints:**


* `1 <= startTime.length == endTime.length == profit.length <= 5 * 104`
* `1 <= startTime[i] < endTime[i] <= 109`
* `1 <= profit[i] <= 104`



#Test case
solution = Solution()
assert solution.jobScheduling([788, 846, 685, 926, 120, 892, 426, 144, 67, 885], [376, 218, 161, 774, 474], [7594, 3954, 6603, 4847, 1229]) == 22998
assert solution.jobScheduling([614, 238, 89], [28, 776, 834, 124, 439], [9203, 5748, 1333, 4358, 5075, 7922, 7958]) == 0
assert solution.jobScheduling([358, 742, 446, 70], [921, 546, 793], [9103, 2328, 1233, 55, 8593, 9166, 2855]) == 0
assert solution.jobScheduling([32, 989, 188, 863, 117], [807, 271, 229, 920, 225, 446], [613, 5471, 3971, 8692, 6863, 2314, 3201, 4057, 1207, 7937]) == 0
assert solution.jobScheduling([667, 941, 125, 840], [268, 545], [4882, 5023, 3029, 2727, 5899, 757]) == 0
assert solution.jobScheduling([899, 613, 598], [83, 52, 941, 531, 835, 169, 302, 430, 376, 954], [8587, 8094]) == 16681
assert solution.jobScheduling([985, 939, 330, 130, 799, 133], [800, 500, 518, 226], [3855, 6533, 4213, 5775, 6848, 968]) == 0
assert solution.jobScheduling([104, 37, 100], [448, 289, 334, 907, 51, 515], [5393, 1722, 7663]) == 7663
assert solution.jobScheduling([386, 308, 419, 578, 733, 6, 988, 487, 689, 703], [555, 312, 365, 851], [5002, 9900, 3669, 9369, 8183, 118, 2615, 2688, 1210]) == 0
assert solution.jobScheduling([653, 496, 37, 110, 700], [842, 994, 547], [2330, 3717, 9881, 5436]) == 0
```

# Code
```python
import time
import tracemalloc

tracemalloc.start()
start_time = time.perf_counter()

class Solution:
    def jobScheduling(
        self, startTime: List[int], endTime: List[int], profit: List[int]
    ) -> int:
        jobs = sorted(zip(endTime, startTime, profit))
        n = len(profit)
        dp = [0] * (n + 1)
        for i, (_, s, p) in enumerate(jobs):
            j = bisect_right(jobs, s, hi=i, key=lambda x: x[0])
            dp[i + 1] = max(dp[i], dp[j] + p)
        return dp[n]

end_time = time.perf_counter()
current, peak = tracemalloc.get_traced_memory()
execution_time_s = end_time - start_time
peak_memory_mb = peak / (1024 * 1024)
print(f"Execution Time: {execution_time_s:.6f} seconds")
print(f"Peak Memory Usage: {peak_memory_mb:.6f} MB")
tracemalloc.stop()
```
